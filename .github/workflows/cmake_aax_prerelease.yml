name: AAX Pre Release

on:
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS
            os: macos-15
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            plugin_os_format: "AAX"
            cmake_extra_flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            plugin_os_format: "AAX"
            cmake_extra_flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    steps:
      - name: Set up Developer Command Prompt (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Cache IPP (Windows)
        if: runner.os == 'Windows'
        id: cache-ipp
        uses: actions/cache@v4
        with:
          key: ipp-v6
          path: C:\Program Files (x86)\Intel

      - name: Install IPP (Windows)
        if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
        shell: bash
        run: |
          curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/2e89fab4-e1c7-4f14-a1ef-6cddba8c5fa7/intel-ipp-2022.0.0.796_offline.exe
          ./oneapi.exe -s -x -f oneapi
          ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

      - name: Save IPP cache (even on CI fail)
        if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files (x86)\Intel
          key: ipp-v6

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: choco install ninja

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      # This block can be removed once 15.1 is default (JUCE requires it when building on macOS 14)
      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true # Get JUCE populated

      - name: Import Certificates (macOS)
        uses: apple-actions/import-codesign-certs@v4 # only exists as a tag right now
        if: ${{ (matrix.name == 'macOS') && (env.p12-file-base64 != '')}}
        with:
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
        env:
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}

      - name: Configure
        shell: bash
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} ${{ matrix.cmake_extra_flags }} .
        env:
          PLUGIN_OS_FORMAT: ${{ matrix.plugin_os_format }}

      - name: Build
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      - name: Test
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest --output-on-failure -j4 -VV

      - name: Read in .env from CMake # see GitHubENV.cmake
        shell: bash
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        shell: bash
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "AAX_PATH=$ARTIFACTS_PATH/AAX/${{ env.PRODUCT_NAME }}.axxplugin" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Check AAX releases
        shell: bash
        run: |
          ls "${{ env.ARTIFACTS_PATH }}/AAX"

      - name: Upload AAX
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: "${{ env.ARTIFACTS_PATH }}/AAX/*.aaxplugin"

  pre-release:
    name: Release AAX
    runs-on: ubuntu-latest
    needs: build_and_test
    permissions:
      contents: write

    steps:
    - name: Get artifacts
      uses: actions/download-artifact@v4

    - name: Download AAX pre-release repo
      uses: actions/checkout@v4
      with:
        repository: "ZL-Audio/ZLEqualizerAAX"
        fetch-depth: 0
        path: "release_repo"
        ssh-key: ${{ secrets.AAX_RELEASE_DEPLOY_KEY }}

    - name: Remove old AAX releases
      run: |
        rm -rf "release_repo/macOS"
        rm -rf "release_repo/Windows"

    - name: Move current AAX pre-releases
      run: |
        mv -v "macOS" "release_repo/macOS"
        mv -v "Windows" "release_repo/Windows"

    - name: Commit AAX pre-release repo
      run: |
        cd "release_repo"
        git config user.name github-actions
        git config user.email github-actions@github.com
        git checkout --orphan newBranch
        git add -A
        git commit -m "pre-release"
        git branch -D main
        git branch -m main
        git push -f origin main