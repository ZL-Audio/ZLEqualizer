// Copyright (C) 2025 - zsliu98
// This file is part of ZLEqualizer
//
// ZLEqualizer is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License Version 3 as published by the Free Software Foundation.
//
// ZLEqualizer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License along with ZLEqualizer. If not, see <https://www.gnu.org/licenses/>.

#pragma once

#include <array>
#include <juce_gui_basics/juce_gui_basics.h>

#include "../helper/helper.hpp"

namespace zlpanel {
    const static std::vector<double> ws = {
        1.30899694e-03, 1.32166652e-03, 1.33445873e-03, 1.34737475e-03,
        1.36041578e-03, 1.37358303e-03, 1.38687773e-03, 1.40030111e-03,
        1.41385441e-03, 1.42753889e-03, 1.44135582e-03, 1.45530648e-03,
        1.46939217e-03, 1.48361419e-03, 1.49797386e-03, 1.51247252e-03,
        1.52711151e-03, 1.54189218e-03, 1.55681592e-03, 1.57188410e-03,
        1.58709813e-03, 1.60245941e-03, 1.61796936e-03, 1.63362944e-03,
        1.64944109e-03, 1.66540578e-03, 1.68152498e-03, 1.69780020e-03,
        1.71423295e-03, 1.73082475e-03, 1.74757713e-03, 1.76449166e-03,
        1.78156991e-03, 1.79881345e-03, 1.81622389e-03, 1.83380284e-03,
        1.85155193e-03, 1.86947282e-03, 1.88756716e-03, 1.90583663e-03,
        1.92428293e-03, 1.94290777e-03, 1.96171288e-03, 1.98069999e-03,
        1.99987088e-03, 2.01922733e-03, 2.03877112e-03, 2.05850407e-03,
        2.07842801e-03, 2.09854480e-03, 2.11885629e-03, 2.13936437e-03,
        2.16007095e-03, 2.18097795e-03, 2.20208730e-03, 2.22340096e-03,
        2.24492092e-03, 2.26664916e-03, 2.28858771e-03, 2.31073860e-03,
        2.33310388e-03, 2.35568564e-03, 2.37848595e-03, 2.40150695e-03,
        2.42475077e-03, 2.44821956e-03, 2.47191550e-03, 2.49584079e-03,
        2.51999765e-03, 2.54438832e-03, 2.56901506e-03, 2.59388016e-03,
        2.61898593e-03, 2.64433469e-03, 2.66992880e-03, 2.69577063e-03,
        2.72186258e-03, 2.74820707e-03, 2.77480654e-03, 2.80166347e-03,
        2.82878034e-03, 2.85615967e-03, 2.88380400e-03, 2.91171589e-03,
        2.93989794e-03, 2.96835276e-03, 2.99708299e-03, 3.02609130e-03,
        3.05538037e-03, 3.08495293e-03, 3.11481171e-03, 3.14495950e-03,
        3.17539907e-03, 3.20613327e-03, 3.23716494e-03, 3.26849697e-03,
        3.30013225e-03, 3.33207372e-03, 3.36432435e-03, 3.39688712e-03,
        3.42976507e-03, 3.46296124e-03, 3.49647871e-03, 3.53032059e-03,
        3.56449002e-03, 3.59899017e-03, 3.63382424e-03, 3.66899547e-03,
        3.70450711e-03, 3.74036246e-03, 3.77656486e-03, 3.81311765e-03,
        3.85002423e-03, 3.88728802e-03, 3.92491248e-03, 3.96290111e-03,
        4.00125742e-03, 4.03998497e-03, 4.07908736e-03, 4.11856822e-03,
        4.15843121e-03, 4.19868003e-03, 4.23931840e-03, 4.28035012e-03,
        4.32177897e-03, 4.36360880e-03, 4.40584350e-03, 4.44848698e-03,
        4.49154320e-03, 4.53501616e-03, 4.57890988e-03, 4.62322844e-03,
        4.66797596e-03, 4.71315658e-03, 4.75877450e-03, 4.80483395e-03,
        4.85133919e-03, 4.89829456e-03, 4.94570440e-03, 4.99357311e-03,
        5.04190514e-03, 5.09070496e-03, 5.13997711e-03, 5.18972616e-03,
        5.23995672e-03, 5.29067345e-03, 5.34188107e-03, 5.39358431e-03,
        5.44578799e-03, 5.49849693e-03, 5.55171604e-03, 5.60545024e-03,
        5.65970453e-03, 5.71448394e-03, 5.76979355e-03, 5.82563850e-03,
        5.88202396e-03, 5.93895516e-03, 5.99643739e-03, 6.05447599e-03,
        6.11307633e-03, 6.17224386e-03, 6.23198405e-03, 6.29230247e-03,
        6.35320470e-03, 6.41469639e-03, 6.47678325e-03, 6.53947104e-03,
        6.60276557e-03, 6.66667272e-03, 6.73119842e-03, 6.79634866e-03,
        6.86212947e-03, 6.92854696e-03, 6.99560730e-03, 7.06331671e-03,
        7.13168147e-03, 7.20070791e-03, 7.27040246e-03, 7.34077157e-03,
        7.41182176e-03, 7.48355965e-03, 7.55599187e-03, 7.62912515e-03,
        7.70296628e-03, 7.77752211e-03, 7.85279955e-03, 7.92880559e-03,
        8.00554727e-03, 8.08303173e-03, 8.16126616e-03, 8.24025780e-03,
        8.32001398e-03, 8.40054212e-03, 8.48184967e-03, 8.56394419e-03,
        8.64683329e-03, 8.73052466e-03, 8.81502606e-03, 8.90034534e-03,
        8.98649042e-03, 9.07346928e-03, 9.16128999e-03, 9.24996071e-03,
        9.33948965e-03, 9.42988514e-03, 9.52115554e-03, 9.61330934e-03,
        9.70635508e-03, 9.80030140e-03, 9.89515701e-03, 9.99093071e-03,
        1.00876314e-02, 1.01852680e-02, 1.02838497e-02, 1.03833855e-02,
        1.04838847e-02, 1.05853566e-02, 1.06878106e-02, 1.07912563e-02,
        1.08957032e-02, 1.10011610e-02, 1.11076396e-02, 1.12151487e-02,
        1.13236984e-02, 1.14332987e-02, 1.15439599e-02, 1.16556921e-02,
        1.17685057e-02, 1.18824113e-02, 1.19974193e-02, 1.21135405e-02,
        1.22307856e-02, 1.23491655e-02, 1.24686912e-02, 1.25893737e-02,
        1.27112243e-02, 1.28342543e-02, 1.29584751e-02, 1.30838982e-02,
        1.32105352e-02, 1.33383979e-02, 1.34674982e-02, 1.35978481e-02,
        1.37294596e-02, 1.38623449e-02, 1.39965164e-02, 1.41319865e-02,
        1.42687678e-02, 1.44068730e-02, 1.45463150e-02, 1.46871065e-02,
        1.48292607e-02, 1.49727909e-02, 1.51177102e-02, 1.52640322e-02,
        1.54117704e-02, 1.55609386e-02, 1.57115505e-02, 1.58636202e-02,
        1.60171617e-02, 1.61721894e-02, 1.63287175e-02, 1.64867607e-02,
        1.66463335e-02, 1.68074508e-02, 1.69701275e-02, 1.71343788e-02,
        1.73002198e-02, 1.74676659e-02, 1.76367328e-02, 1.78074360e-02,
        1.79797914e-02, 1.81538151e-02, 1.83295231e-02, 1.85069317e-02,
        1.86860574e-02, 1.88669169e-02, 1.90495269e-02, 1.92339043e-02,
        1.94200663e-02, 1.96080302e-02, 1.97978133e-02, 1.99894333e-02,
        2.01829079e-02, 2.03782552e-02, 2.05754932e-02, 2.07746402e-02,
        2.09757148e-02, 2.11787355e-02, 2.13837212e-02, 2.15906910e-02,
        2.17996639e-02, 2.20106595e-02, 2.22236973e-02, 2.24387971e-02,
        2.26559787e-02, 2.28752625e-02, 2.30966686e-02, 2.33202177e-02,
        2.35459305e-02, 2.37738279e-02, 2.40039312e-02, 2.42362615e-02,
        2.44708406e-02, 2.47076901e-02, 2.49468320e-02, 2.51882885e-02,
        2.54320821e-02, 2.56782353e-02, 2.59267710e-02, 2.61777122e-02,
        2.64310823e-02, 2.66869047e-02, 2.69452031e-02, 2.72060016e-02,
        2.74693243e-02, 2.77351957e-02, 2.80036404e-02, 2.82746833e-02,
        2.85483496e-02, 2.88246647e-02, 2.91036542e-02, 2.93853440e-02,
        2.96697602e-02, 2.99569292e-02, 3.02468777e-02, 3.05396326e-02,
        3.08352210e-02, 3.11336704e-02, 3.14350084e-02, 3.17392630e-02,
        3.20464624e-02, 3.23566352e-02, 3.26698101e-02, 3.29860162e-02,
        3.33052828e-02, 3.36276395e-02, 3.39531162e-02, 3.42817432e-02,
        3.46135509e-02, 3.49485701e-02, 3.52868320e-02, 3.56283678e-02,
        3.59732093e-02, 3.63213885e-02, 3.66729376e-02, 3.70278893e-02,
        3.73862765e-02, 3.77481326e-02, 3.81134909e-02, 3.84823855e-02,
        3.88548506e-02, 3.92309208e-02, 3.96106308e-02, 3.99940160e-02,
        4.03811119e-02, 4.07719545e-02, 4.11665800e-02, 4.15650250e-02,
        4.19673265e-02, 4.23735218e-02, 4.27836485e-02, 4.31977449e-02,
        4.36158492e-02, 4.40380003e-02, 4.44642374e-02, 4.48945999e-02,
        4.53291278e-02, 4.57678614e-02, 4.62108415e-02, 4.66581092e-02,
        4.71097058e-02, 4.75656734e-02, 4.80260543e-02, 4.84908910e-02,
        4.89602269e-02, 4.94341054e-02, 4.99125705e-02, 5.03956666e-02,
        5.08834385e-02, 5.13759315e-02, 5.18731912e-02, 5.23752639e-02,
        5.28821960e-02, 5.33940346e-02, 5.39108273e-02, 5.44326219e-02,
        5.49594668e-02, 5.54914111e-02, 5.60285039e-02, 5.65707952e-02,
        5.71183352e-02, 5.76711748e-02, 5.82293652e-02, 5.87929583e-02,
        5.93620063e-02, 5.99365620e-02, 6.05166788e-02, 6.11024104e-02,
        6.16938112e-02, 6.22909361e-02, 6.28938405e-02, 6.35025803e-02,
        6.41172120e-02, 6.47377926e-02, 6.53643798e-02, 6.59970316e-02,
        6.66358067e-02, 6.72807644e-02, 6.79319646e-02, 6.85894676e-02,
        6.92533345e-02, 6.99236269e-02, 7.06004069e-02, 7.12837374e-02,
        7.19736817e-02, 7.26703039e-02, 7.33736686e-02, 7.40838410e-02,
        7.48008871e-02, 7.55248734e-02, 7.62558670e-02, 7.69939358e-02,
        7.77391483e-02, 7.84915736e-02, 7.92512814e-02, 8.00183424e-02,
        8.07928276e-02, 8.15748090e-02, 8.23643590e-02, 8.31615509e-02,
        8.39664588e-02, 8.47791572e-02, 8.55997217e-02, 8.64282282e-02,
        8.72647537e-02, 8.81093758e-02, 8.89621729e-02, 8.98232241e-02,
        9.06926093e-02, 9.15704091e-02, 9.24567050e-02, 9.33515792e-02,
        9.42551148e-02, 9.51673956e-02, 9.60885061e-02, 9.70185320e-02,
        9.79575594e-02, 9.89056756e-02, 9.98629684e-02, 1.00829527e-01,
        1.01805440e-01, 1.02790799e-01, 1.03785696e-01, 1.04790222e-01,
        1.05804470e-01, 1.06828535e-01, 1.07862512e-01, 1.08906497e-01,
        1.09960586e-01, 1.11024878e-01, 1.12099470e-01, 1.13184464e-01,
        1.14279959e-01, 1.15386057e-01, 1.16502861e-01, 1.17630474e-01,
        1.18769001e-01, 1.19918548e-01, 1.21079221e-01, 1.22251129e-01,
        1.23434378e-01, 1.24629081e-01, 1.25835347e-01, 1.27053287e-01,
        1.28283017e-01, 1.29524648e-01, 1.30778297e-01, 1.32044080e-01,
        1.33322115e-01, 1.34612519e-01, 1.35915413e-01, 1.37230917e-01,
        1.38559154e-01, 1.39900247e-01, 1.41254320e-01, 1.42621499e-01,
        1.44001910e-01, 1.45395683e-01, 1.46802945e-01, 1.48223828e-01,
        1.49658464e-01, 1.51106985e-01, 1.52569526e-01, 1.54046223e-01,
        1.55537213e-01, 1.57042634e-01, 1.58562625e-01, 1.60097328e-01,
        1.61646886e-01, 1.63211441e-01, 1.64791140e-01, 1.66386128e-01,
        1.67996553e-01, 1.69622566e-01, 1.71264317e-01, 1.72921958e-01,
        1.74595643e-01, 1.76285527e-01, 1.77991768e-01, 1.79714523e-01,
        1.81453952e-01, 1.83210217e-01, 1.84983480e-01, 1.86773907e-01,
        1.88581663e-01, 1.90406916e-01, 1.92249835e-01, 1.94110592e-01,
        1.95989358e-01, 1.97886309e-01, 1.99801620e-01, 2.01735469e-01,
        2.03688036e-01, 2.05659501e-01, 2.07650048e-01, 2.09659861e-01,
        2.11689126e-01, 2.13738033e-01, 2.15806770e-01, 2.17895531e-01,
        2.20004508e-01, 2.22133898e-01, 2.24283898e-01, 2.26454707e-01,
        2.28646527e-01, 2.30859562e-01, 2.33094016e-01, 2.35350097e-01,
        2.37628015e-01, 2.39927980e-01, 2.42250206e-01, 2.44594908e-01,
        2.46962304e-01, 2.49352615e-01, 2.51766060e-01, 2.54202865e-01,
        2.56663256e-01, 2.59147460e-01, 2.61655708e-01, 2.64188233e-01,
        2.66745271e-01, 2.69327057e-01, 2.71933832e-01, 2.74565838e-01,
        2.77223319e-01, 2.79906520e-01, 2.82615693e-01, 2.85351086e-01,
        2.88112956e-01, 2.90901557e-01, 2.93717148e-01, 2.96559991e-01,
        2.99430350e-01, 3.02328490e-01, 3.05254681e-01, 3.08209194e-01,
        3.11192303e-01, 3.14204286e-01, 3.17245421e-01, 3.20315990e-01,
        3.23416280e-01, 3.26546576e-01, 3.29707170e-01, 3.32898355e-01,
        3.36120427e-01, 3.39373685e-01, 3.42658431e-01, 3.45974969e-01,
        3.49323607e-01, 3.52704657e-01, 3.56118431e-01, 3.59565246e-01,
        3.63045423e-01, 3.66559284e-01, 3.70107155e-01, 3.73689365e-01,
        3.77306247e-01, 3.80958136e-01, 3.84645371e-01, 3.88368294e-01,
        3.92127251e-01, 3.95922591e-01, 3.99754665e-01, 4.03623829e-01,
        4.07530441e-01, 4.11474866e-01, 4.15457468e-01, 4.19478617e-01,
        4.23538686e-01, 4.27638052e-01, 4.31777094e-01, 4.35956199e-01,
        4.40175751e-01, 4.44436145e-01, 4.48737774e-01, 4.53081038e-01,
        4.57466339e-01, 4.61894086e-01, 4.66364688e-01, 4.70878560e-01,
        4.75436121e-01, 4.80037794e-01, 4.84684006e-01, 4.89375188e-01,
        4.94111775e-01, 4.98894207e-01, 5.03722927e-01, 5.08598384e-01,
        5.13521029e-01, 5.18491320e-01, 5.23509718e-01, 5.28576688e-01,
        5.33692700e-01, 5.38858230e-01, 5.44073756e-01, 5.49339762e-01,
        5.54656737e-01, 5.60025174e-01, 5.65445572e-01, 5.70918433e-01,
        5.76444264e-01, 5.82023580e-01, 5.87656896e-01, 5.93344737e-01,
        5.99087629e-01, 6.04886106e-01, 6.10740706e-01, 6.16651971e-01,
        6.22620451e-01, 6.28646698e-01, 6.34731273e-01, 6.40874739e-01,
        6.47077667e-01, 6.53340633e-01, 6.59664216e-01, 6.66049005e-01,
        6.72495590e-01, 6.79004572e-01, 6.85576553e-01, 6.92212142e-01,
        6.98911957e-01, 7.05676619e-01, 7.12506754e-01, 7.19402997e-01,
        7.26365988e-01, 7.33396373e-01, 7.40494804e-01, 7.47661939e-01,
        7.54898444e-01, 7.62204990e-01, 7.69582254e-01, 7.77030923e-01,
        7.84551685e-01, 7.92145240e-01, 7.99812292e-01, 8.07553553e-01,
        8.15369739e-01, 8.23261577e-01, 8.31229800e-01, 8.39275145e-01,
        8.47398360e-01, 8.55600198e-01, 8.63881421e-01, 8.72242796e-01,
        8.80685100e-01, 8.89209116e-01, 8.97815634e-01, 9.06505453e-01,
        9.15279380e-01, 9.24138228e-01, 9.33082820e-01, 9.42113985e-01,
        9.51232562e-01, 9.60439395e-01, 9.69735340e-01, 9.79121260e-01,
        9.88598024e-01, 9.98166512e-01, 1.00782761e+00, 1.01758222e+00,
        1.02743124e+00, 1.03737559e+00, 1.04741619e+00, 1.05755397e+00,
        1.06778987e+00, 1.07812485e+00, 1.08855985e+00, 1.09909585e+00,
        1.10973383e+00, 1.12047478e+00, 1.13131968e+00, 1.14226955e+00,
        1.15332540e+00, 1.16448826e+00, 1.17575916e+00, 1.18713915e+00,
        1.19862929e+00, 1.21023064e+00, 1.22194428e+00, 1.23377129e+00,
        1.24571277e+00, 1.25776983e+00, 1.26994359e+00, 1.28223518e+00,
        1.29464574e+00, 1.30717641e+00, 1.31982837e+00, 1.33260279e+00,
        1.34550085e+00, 1.35852374e+00, 1.37167268e+00, 1.38494889e+00,
        1.39835360e+00, 1.41188805e+00, 1.42555350e+00, 1.43935121e+00,
        1.45328247e+00, 1.46734857e+00, 1.48155081e+00, 1.49589051e+00,
        1.51036900e+00, 1.52498763e+00, 1.53974775e+00, 1.55465074e+00,
        1.56969796e+00, 1.58489083e+00, 1.60023074e+00, 1.61571913e+00,
        1.63135742e+00, 1.64714708e+00, 1.66308957e+00, 1.67918635e+00,
        1.69543894e+00, 1.71184883e+00, 1.72841755e+00, 1.74514664e+00,
        1.76203765e+00, 1.77909214e+00, 1.79631170e+00, 1.81369792e+00,
        1.83125243e+00, 1.84897684e+00, 1.86687280e+00, 1.88494197e+00,
        1.90318604e+00, 1.92160668e+00, 1.94020562e+00, 1.95898457e+00,
        1.97794528e+00, 1.99708951e+00, 2.01641903e+00, 2.03593564e+00,
        2.05564115e+00, 2.07553738e+00, 2.09562619e+00, 2.11590943e+00,
        2.13638899e+00, 2.15706677e+00, 2.17794469e+00, 2.19902468e+00,
        2.22030870e+00, 2.24179873e+00, 2.26349676e+00, 2.28540479e+00,
        2.30752487e+00, 2.32985905e+00, 2.35240940e+00, 2.37517801e+00,
        2.39816699e+00, 2.42137848e+00, 2.44481463e+00, 2.46847761e+00,
        2.49236963e+00, 2.51649289e+00, 2.54084964e+00, 2.56544213e+00,
        2.59027265e+00, 2.61534350e+00, 2.64065701e+00, 2.66621552e+00,
        2.69202141e+00, 2.71807707e+00, 2.74438492e+00, 2.77094740e+00,
        2.79776698e+00, 2.82484613e+00, 2.85218738e+00, 2.87979327e+00
    };

    static inline float replaceWithFinite(const float x) {
        return std::isfinite(x) ? x : 100000.f;
    }

    inline static float indexToX(const size_t i, const juce::Rectangle<float> bound) {
        return static_cast<float>(i) /
               static_cast<float>(zldsp::filter::kFrequencies.size() - 1) * bound.getWidth() + bound.getX();
    }

    inline static float freqToX(const double freq, const juce::Rectangle<float> bound) {
        const auto portion = std::log(freq / zldsp::filter::kFrequencies.front()) / std::log(
                                 zldsp::filter::kFrequencies.back() / zldsp::filter::kFrequencies.front());
        return static_cast<float>(portion) * bound.getWidth() + bound.getX();
    }

    inline static float dbToY(const float db, const float maxDB, const juce::Rectangle<float> bound) {
        return replaceWithFinite(-db / maxDB * bound.getHeight() * 0.5f + bound.getCentreY());
    }

    inline static void drawCurve(juce::Path &path,
                                 const std::vector<double> &dBs,
                                 const float maxDB,
                                 const juce::Rectangle<float> &bound,
                                 const bool reverse = false,
                                 const bool startPath = true) {
        const auto threshold = 2 * maxDB / static_cast<float>(bound.getHeight());
        zlpanel::PathMinimizer minimizer{path};
        if (reverse) {
            {
                constexpr auto i = zldsp::filter::kFrequencies.size() - 1;
                const auto x = indexToX(i, bound);
                const auto y = dbToY(static_cast<float>(dBs[i]), maxDB, bound);
                if (startPath) {
                    minimizer.template startNewSubPath<true>(x, y);
                } else {
                    minimizer.template startNewSubPath<false>(x, y);
                }
            }
            auto dB0 = dBs[0];
            for (size_t j = zldsp::filter::kFrequencies.size() - 2; j > 0; --j) {
                if (std::abs(dB0 - dBs[j]) >= threshold
                    || (dBs[j] >= dBs[j - 1] && dBs[j] >= dBs[j + 1])
                    || (dBs[j] <= dBs[j - 1] && dBs[j] <= dBs[j + 1])) {
                    const auto x = indexToX(j, bound);
                    const auto y = dbToY(static_cast<float>(dBs[j]), maxDB, bound);
                    minimizer.lineTo(x, y);
                    dB0 = dBs[j];
                }
            } {
                constexpr auto i = 0;
                const auto x = indexToX(i, bound);
                const auto y = dbToY(static_cast<float>(dBs[i]), maxDB, bound);
                minimizer.lineTo(x, y);
            }
        } else {
            {
                constexpr auto i = 0;
                const auto x = indexToX(i, bound);
                const auto y = dbToY(static_cast<float>(dBs[i]), maxDB, bound);
                if (startPath) {
                    minimizer.template startNewSubPath<true>(x, y);
                } else {
                    minimizer.template startNewSubPath<false>(x, y);
                }
            }
            auto dB0 = dBs[0];
            for (size_t j = 1; j < zldsp::filter::kFrequencies.size() - 1; ++j) {
                if (std::abs(dB0 - dBs[j]) >= threshold
                    || (dBs[j] >= dBs[j - 1] && dBs[j] >= dBs[j + 1])
                    || (dBs[j] <= dBs[j - 1] && dBs[j] <= dBs[j + 1])) {
                    const auto x = indexToX(j, bound);
                    const auto y = dbToY(static_cast<float>(dBs[j]), maxDB, bound);
                    minimizer.lineTo(x, y);
                    dB0 = dBs[j];
                }
            } {
                constexpr auto i = zldsp::filter::kFrequencies.size() - 1;
                const auto x = indexToX(i, bound);
                const auto y = dbToY(static_cast<float>(dBs[i]), maxDB, bound);
                minimizer.lineTo(x, y);
            }
        }
        minimizer.finish();
    }
}
