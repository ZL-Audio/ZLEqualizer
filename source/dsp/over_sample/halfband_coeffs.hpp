// Copyright (C) 2025 - zsliu98
// This file is part of ZLEqualizer
//
// ZLEqualizer is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License Version 3 as published by the Free Software Foundation.
//
// ZLEqualizer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License along with ZLEqualizer. If not, see <https://www.gnu.org/licenses/>.

#pragma once

#include <array>

namespace zldsp::oversample::halfband_coeff {
    // naming filter order + transition bandwidth + stopband attenuation
    // generated by the scipy_coeff_calculation.py
    enum CoeffID {
        k128_05_100,
        k112_06_100,
        k96_07_100,
        k80_08_100,
        k64_10_100,
        k32_22_100,
    };

    template <typename FloatType, typename... Args>
    constexpr std::array<FloatType, sizeof...(Args)> make_typed_array(Args&&... args) {
        return { static_cast<FloatType>(std::forward<Args>(args))... };
    }

    template<typename FloatType>
    static constexpr auto kCoeff_128_05_100 = make_typed_array<FloatType>(
        0.0,-7.589203655876322e-06,0.0,1.4322055398526711e-05,0.0,-2.738001348671366e-05,0.0,4.779015273136994e-05,0.0,-7.826722268856448e-05,0.0,0.00012215790481579162,0.0,-0.00018350257896515565,0.0,0.00026709989794593183,0.0,-0.0003785769919066064,0.0,0.0005244506495371994,0.0,-0.000712181466549671,0.0,0.0009502539644897684,0.0,-0.001248274722197105,0.0,0.0016170850476153278,0.0,-0.0020689633698098876,0.0,0.0026179178779124905,0.0,-0.003280084837349283,0.0,0.004074445541830432,0.0,-0.005023804328744719,0.0,0.006156423857658078,0.0,-0.007508517610364798,0.0,0.009128311676852779,0.0,-0.011082741293883445,0.0,0.013468986393258083,0.0,-0.016435323311523174,0.0,0.020221288308978878,0.0,-0.02524171366789543,0.0,0.0322828115113965,0.0,-0.043034322653127705,0.0,0.0618986507214273,0.0,-0.10503603071265818,0.0,0.3179498586611021,0.5000050000000964,0.3179498586611021,0.0,-0.10503603071265818,0.0,0.0618986507214273,0.0,-0.043034322653127705,0.0,0.0322828115113965,0.0,-0.02524171366789543,0.0,0.020221288308978878,0.0,-0.016435323311523174,0.0,0.013468986393258083,0.0,-0.011082741293883445,0.0,0.009128311676852779,0.0,-0.007508517610364798,0.0,0.006156423857658078,0.0,-0.005023804328744719,0.0,0.004074445541830432,0.0,-0.003280084837349283,0.0,0.0026179178779124905,0.0,-0.0020689633698098876,0.0,0.0016170850476153278,0.0,-0.001248274722197105,0.0,0.0009502539644897684,0.0,-0.000712181466549671,0.0,0.0005244506495371994,0.0,-0.0003785769919066064,0.0,0.00026709989794593183,0.0,-0.00018350257896515565,0.0,0.00012215790481579162,0.0,-7.826722268856448e-05,0.0,4.779015273136994e-05,0.0,-2.738001348671366e-05,0.0,1.4322055398526711e-05,0.0,-7.589203655876322e-06,0.0
    );

    template<typename FloatType>
    static constexpr auto kCoeff_112_06_100 = make_typed_array<FloatType>(
        0.0,-1.2043153410716213e-05,0.0,2.4198587378416167e-05,0.0,-4.757316496321258e-05,0.0,8.47956088047793e-05,0.0,-0.00014117538310136506,0.0,0.00022326344811628656,0.0,-0.0003389797032306147,0.0,0.0004977229630009424,0.0,-0.000710496781266523,0.0,0.0009900454429058328,0.0,-0.0013510029992916015,0.0,0.0018101197065917922,0.0,-0.002386643678041616,0.0,0.003102844010726106,0.0,-0.0039849178459040215,0.0,0.005064457916274795,0.0,-0.006380773225643876,0.0,0.007984833467767358,0.0,-0.009945775287302751,0.0,0.012362339642501259,0.0,-0.01538358297361892,0.0,0.01924899053019595,0.0,-0.024372460878012075,0.0,0.03153839405608602,0.0,-0.04243388653962021,0.0,0.06145794611497147,0.0,-0.10476678018054285,0.0,0.3178592955672356,0.4999940779171595,0.3178592955672356,0.0,-0.10476678018054285,0.0,0.06145794611497147,0.0,-0.04243388653962021,0.0,0.03153839405608602,0.0,-0.024372460878012075,0.0,0.01924899053019595,0.0,-0.01538358297361892,0.0,0.012362339642501259,0.0,-0.009945775287302751,0.0,0.007984833467767358,0.0,-0.006380773225643876,0.0,0.005064457916274795,0.0,-0.0039849178459040215,0.0,0.003102844010726106,0.0,-0.002386643678041616,0.0,0.0018101197065917922,0.0,-0.0013510029992916015,0.0,0.0009900454429058328,0.0,-0.000710496781266523,0.0,0.0004977229630009424,0.0,-0.0003389797032306147,0.0,0.00022326344811628656,0.0,-0.00014117538310136506,0.0,8.47956088047793e-05,0.0,-4.757316496321258e-05,0.0,2.4198587378416167e-05,0.0,-1.2043153410716213e-05,0.0
    );

    template<typename FloatType>
    static constexpr auto kCoeff_96_07_100 = make_typed_array<FloatType>(
        0.0,-7.011317302877052e-06,0.0,1.9056010878526716e-05,0.0,-4.375142232628643e-05,0.0,8.797484186812543e-05,0.0,-0.00016171789752813766,0.0,0.00027810998222458575,0.0,-0.00045386838987735936,0.0,0.0007097396230249193,0.0,-0.0010709087043529848,0.0,0.0015675044934133446,0.0,-0.0022352396591674593,0.0,0.0031164809909999475,0.0,-0.004262046867253,0.0,0.005734430555131429,0.0,-0.00761360409732251,0.0,0.01000764469326997,0.0,-0.013072742386254868,0.0,0.017052646257047503,0.0,-0.02236218399727134,0.0,0.02978306813165965,0.0,-0.0409960617362971,0.0,0.06039040409671073,0.0,-0.10410955972352487,0.0,0.31763738946442477,0.5000029106201541,0.31763738946442477,0.0,-0.10410955972352487,0.0,0.06039040409671073,0.0,-0.0409960617362971,0.0,0.02978306813165965,0.0,-0.02236218399727134,0.0,0.017052646257047503,0.0,-0.013072742386254868,0.0,0.01000764469326997,0.0,-0.00761360409732251,0.0,0.005734430555131429,0.0,-0.004262046867253,0.0,0.0031164809909999475,0.0,-0.0022352396591674593,0.0,0.0015675044934133446,0.0,-0.0010709087043529848,0.0,0.0007097396230249193,0.0,-0.00045386838987735936,0.0,0.00027810998222458575,0.0,-0.00016171789752813766,0.0,8.797484186812543e-05,0.0,-4.375142232628643e-05,0.0,1.9056010878526716e-05,0.0,-7.011317302877052e-06,0.0
    );

    template<typename FloatType>
    static constexpr auto kCoeff_80_08_100 = make_typed_array<FloatType>(
        0.0,-1.3628401625116662e-05,0.0,4.0429788941755806e-05,0.0,-9.712154263731821e-05,0.0,0.00020170298436936356,0.0,-0.0003797752235305218,0.0,0.0006650120300385311,0.0,-0.0011002083833807149,0.0,0.0017384038768661217,0.0,-0.0026443368519734095,0.0,0.003896924673219469,0.0,-0.005593910448207061,0.0,0.007861043879657213,0.0,-0.010870451750363459,0.0,0.0148784574939686,0.0,-0.020307635461698822,0.0,0.027941507628857665,0.0,-0.03945609608398975,0.0,0.059229341732181424,0.0,-0.10338746372437112,0.0,0.31739234284026063,0.499994682600328,0.31739234284026063,0.0,-0.10338746372437112,0.0,0.059229341732181424,0.0,-0.03945609608398975,0.0,0.027941507628857665,0.0,-0.020307635461698822,0.0,0.0148784574939686,0.0,-0.010870451750363459,0.0,0.007861043879657213,0.0,-0.005593910448207061,0.0,0.003896924673219469,0.0,-0.0026443368519734095,0.0,0.0017384038768661217,0.0,-0.0011002083833807149,0.0,0.0006650120300385311,0.0,-0.0003797752235305218,0.0,0.00020170298436936356,0.0,-9.712154263731821e-05,0.0,4.0429788941755806e-05,0.0,-1.3628401625116662e-05,0.0
    );

    template<typename FloatType>
    static constexpr auto kCoeff_64_10_100 = make_typed_array<FloatType>(
        0.0,-1.1862500973885408e-05,0.0,5.145124527321135e-05,0.0,-0.00015111880405814198,0.0,0.00036246818202682847,0.0,-0.0007618602913513889,0.0,0.0014552225933605397,0.0,-0.002582867445450085,0.0,0.004326099570272364,0.0,-0.006920223853669338,0.0,0.0106846763702472,0.0,-0.0160960963774436,0.0,0.023974169618303384,0.0,-0.03600601594483746,0.0,0.05655154343385448,0.0,-0.10168980712203239,0.0,0.3168107072578986,0.5000050015062222,0.3168107072578986,0.0,-0.10168980712203239,0.0,0.05655154343385448,0.0,-0.03600601594483746,0.0,0.023974169618303384,0.0,-0.0160960963774436,0.0,0.0106846763702472,0.0,-0.006920223853669338,0.0,0.004326099570272364,0.0,-0.002582867445450085,0.0,0.0014552225933605397,0.0,-0.0007618602913513889,0.0,0.00036246818202682847,0.0,-0.00015111880405814198,0.0,5.145124527321135e-05,0.0,-1.1862500973885408e-05,0.0
    );

    template<typename FloatType>
    static constexpr auto kCoeff_32_22_100 = make_typed_array<FloatType>(
        0.0,-6.552439190414749e-05,0.0,0.0004969795480246275,0.0,-0.0021234427041212805,0.0,0.006648911404776808,0.0,-0.017075603670879933,0.0,0.03904220662374406,0.0,-0.08919183510859856,0.0,0.3122652319161623,0.49997823764383076,0.3122652319161623,0.0,-0.08919183510859856,0.0,0.03904220662374406,0.0,-0.017075603670879933,0.0,0.006648911404776808,0.0,-0.0021234427041212805,0.0,0.0004969795480246275,0.0,-6.552439190414749e-05,0.0
    );

    template<typename FloatType>
    static std::span<const FloatType> getCoeffByID(const CoeffID id) {
        switch (id) {
            case k128_05_100:
                return kCoeff_128_05_100<FloatType>;
            case k112_06_100:
                return kCoeff_112_06_100<FloatType>;
            case k96_07_100:
                return kCoeff_96_07_100<FloatType>;
            case k80_08_100:
                return kCoeff_80_08_100<FloatType>;
            case k64_10_100:
                return kCoeff_64_10_100<FloatType>;
            case k32_22_100:
                default:
                return kCoeff_32_22_100<FloatType>;
        }
    }
}
