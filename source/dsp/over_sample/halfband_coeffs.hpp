// Copyright (C) 2025 - zsliu98
// This file is part of ZLCompressor
//
// ZLCompressor is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License Version 3 as published by the Free Software Foundation.
//
// ZLCompressor is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License along with ZLCompressor. If not, see <https://www.gnu.org/licenses/>.

#pragma once

#include <array>

namespace zldsp::oversample::halfband_coeff {
    // naming filter order + transition bandwidth + stopband attenuation
    // generated by the scipy_coeff_calculation.py
    static constexpr std::array kCoeff_128_05_100 = {
        0.0,-7.589203655876322e-06,0.0,1.4322055398526711e-05,0.0,-2.738001348671366e-05,0.0,4.779015273136994e-05,0.0,-7.826722268856448e-05,0.0,0.00012215790481579162,0.0,-0.00018350257896515565,0.0,0.00026709989794593183,0.0,-0.0003785769919066064,0.0,0.0005244506495371994,0.0,-0.000712181466549671,0.0,0.0009502539644897684,0.0,-0.001248274722197105,0.0,0.0016170850476153278,0.0,-0.0020689633698098876,0.0,0.0026179178779124905,0.0,-0.003280084837349283,0.0,0.004074445541830432,0.0,-0.005023804328744719,0.0,0.006156423857658078,0.0,-0.007508517610364798,0.0,0.009128311676852779,0.0,-0.011082741293883445,0.0,0.013468986393258083,0.0,-0.016435323311523174,0.0,0.020221288308978878,0.0,-0.02524171366789543,0.0,0.0322828115113965,0.0,-0.043034322653127705,0.0,0.0618986507214273,0.0,-0.10503603071265818,0.0,0.3179498586611021,0.5000050000000964,0.3179498586611021,0.0,-0.10503603071265818,0.0,0.0618986507214273,0.0,-0.043034322653127705,0.0,0.0322828115113965,0.0,-0.02524171366789543,0.0,0.020221288308978878,0.0,-0.016435323311523174,0.0,0.013468986393258083,0.0,-0.011082741293883445,0.0,0.009128311676852779,0.0,-0.007508517610364798,0.0,0.006156423857658078,0.0,-0.005023804328744719,0.0,0.004074445541830432,0.0,-0.003280084837349283,0.0,0.0026179178779124905,0.0,-0.0020689633698098876,0.0,0.0016170850476153278,0.0,-0.001248274722197105,0.0,0.0009502539644897684,0.0,-0.000712181466549671,0.0,0.0005244506495371994,0.0,-0.0003785769919066064,0.0,0.00026709989794593183,0.0,-0.00018350257896515565,0.0,0.00012215790481579162,0.0,-7.826722268856448e-05,0.0,4.779015273136994e-05,0.0,-2.738001348671366e-05,0.0,1.4322055398526711e-05,0.0,-7.589203655876322e-06,0.0
    };

    static constexpr std::array kCoeff_64_10_100 = {
        0.0,-1.1862500973885408e-05,0.0,5.145124527321135e-05,0.0,-0.00015111880405814198,0.0,0.00036246818202682847,0.0,-0.0007618602913513889,0.0,0.0014552225933605397,0.0,-0.002582867445450085,0.0,0.004326099570272364,0.0,-0.006920223853669338,0.0,0.0106846763702472,0.0,-0.0160960963774436,0.0,0.023974169618303384,0.0,-0.03600601594483746,0.0,0.05655154343385448,0.0,-0.10168980712203239,0.0,0.3168107072578986,0.5000050015062222,0.3168107072578986,0.0,-0.10168980712203239,0.0,0.05655154343385448,0.0,-0.03600601594483746,0.0,0.023974169618303384,0.0,-0.0160960963774436,0.0,0.0106846763702472,0.0,-0.006920223853669338,0.0,0.004326099570272364,0.0,-0.002582867445450085,0.0,0.0014552225933605397,0.0,-0.0007618602913513889,0.0,0.00036246818202682847,0.0,-0.00015111880405814198,0.0,5.145124527321135e-05,0.0,-1.1862500973885408e-05,0.0
    };

    static constexpr std::array kCoeff_32_22_100 = {
        0.0,-6.552439190414749e-05,0.0,0.0004969795480246275,0.0,-0.0021234427041212805,0.0,0.006648911404776808,0.0,-0.017075603670879933,0.0,0.03904220662374406,0.0,-0.08919183510859856,0.0,0.3122652319161623,0.49997823764383076,0.3122652319161623,0.0,-0.08919183510859856,0.0,0.03904220662374406,0.0,-0.017075603670879933,0.0,0.006648911404776808,0.0,-0.0021234427041212805,0.0,0.0004969795480246275,0.0,-6.552439190414749e-05,0.0
    };

    template<typename FloatType, std::size_t N>
    constexpr std::array<FloatType, N> convert(const std::array<double, N> &arr) {
        std::array<FloatType, N> float_arr{};
        for (std::size_t i = 0; i < N; ++i) {
            float_arr[i] = static_cast<FloatType>(arr[i]);
        }
        return float_arr;
    }
}
